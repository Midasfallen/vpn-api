"""expand models add vpn_peers payments

Revision ID: 881faf8bfb76
Revises: init
Create Date: autogenerated
"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '881faf8bfb76'
down_revision = 'init'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - adjusted for idempotency on SQLite ###
    conn = op.get_bind()
    # helper to check for column existence
    def has_column(table, column):
        res = conn.execute(sa.text(f"PRAGMA table_info('{table}')")).fetchall()
        return any(r[1] == column for r in res)

    if not has_column('tariffs', 'description'):
        conn.execute(sa.text("ALTER TABLE tariffs ADD COLUMN description VARCHAR"))
    if not has_column('tariffs', 'duration_days'):
        conn.execute(sa.text("ALTER TABLE tariffs ADD COLUMN duration_days INTEGER"))
    if not has_column('tariffs', 'created_at'):
        conn.execute(sa.text("ALTER TABLE tariffs ADD COLUMN created_at DATETIME"))
    # change price type: INTEGER -> Numeric(10,2)
    with op.batch_alter_table('tariffs') as batch_op:
        batch_op.alter_column('price', existing_type=sa.INTEGER(), type_=sa.Numeric(10,2), existing_nullable=False)

    if not has_column('user_tariffs', 'ended_at'):
        conn.execute(sa.text("ALTER TABLE user_tariffs ADD COLUMN ended_at DATETIME"))
    if not has_column('user_tariffs', 'status'):
        conn.execute(sa.text("ALTER TABLE user_tariffs ADD COLUMN status VARCHAR"))
    # Note: altering started_at type may be a no-op on SQLite; keep existing
    # create unique constraint if not exists (SQLite doesn't support IF NOT EXISTS for constraints)

    if not has_column('users', 'google_id'):
        conn.execute(sa.text("ALTER TABLE users ADD COLUMN google_id VARCHAR"))
    if not has_column('users', 'status'):
        conn.execute(sa.text("ALTER TABLE users ADD COLUMN status VARCHAR"))
    if not has_column('users', 'is_admin'):
        conn.execute(sa.text("ALTER TABLE users ADD COLUMN is_admin BOOLEAN"))
    if not has_column('users', 'created_at'):
        conn.execute(sa.text("ALTER TABLE users ADD COLUMN created_at DATETIME"))

    # create vpn_peers table
    op.create_table(
        'vpn_peers',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('wg_private_key', sa.String(), nullable=False),
        sa.Column('wg_public_key', sa.String(), nullable=False),
        sa.Column('wg_ip', sa.String(), nullable=False),
        sa.Column('allowed_ips', sa.String(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=False, server_default=sa.text('1')),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    )

    # create payments table
    op.create_table(
        'payments',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('amount', sa.Numeric(10,2), nullable=False),
        sa.Column('currency', sa.String(length=8), nullable=False, server_default='USD'),
        sa.Column('status', sa.String(), nullable=False, server_default='pending'),
        sa.Column('provider', sa.String(), nullable=True),
        sa.Column('provider_payment_id', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    )
    # Populate default values for existing rows
    conn.execute(sa.text("UPDATE tariffs SET duration_days = 30 WHERE duration_days IS NULL"))
    conn.execute(sa.text("UPDATE tariffs SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL"))
    conn.execute(sa.text("UPDATE user_tariffs SET status = 'active' WHERE status IS NULL"))
    conn.execute(sa.text("UPDATE users SET status = 'pending' WHERE status IS NULL"))
    conn.execute(sa.text("UPDATE users SET is_admin = 0 WHERE is_admin IS NULL"))
    conn.execute(sa.text("UPDATE users SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL"))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payments')
    op.drop_table('vpn_peers')

    with op.batch_alter_table('users') as batch_op:
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_admin')
        batch_op.drop_column('status')
        batch_op.drop_column('google_id')

    with op.batch_alter_table('user_tariffs') as batch_op:
        batch_op.drop_constraint('uix_user_tariff_start', type_='unique')
        batch_op.drop_column('status')
        batch_op.drop_column('ended_at')
        batch_op.alter_column('started_at', existing_type=sa.DateTime(timezone=True), type_=sa.TIMESTAMP(), nullable=True)

    with op.batch_alter_table('tariffs') as batch_op:
        batch_op.alter_column('price', existing_type=sa.Numeric(10,2), type_=sa.INTEGER(), existing_nullable=False)
        batch_op.drop_column('created_at')
        batch_op.drop_column('duration_days')
        batch_op.drop_column('description')
    # ### end Alembic commands ###
