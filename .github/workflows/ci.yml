name: CI

on:
  push:
    branches: [ main, master, fix/* ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Debug runner environment
        run: |
          python --version
          pip -V
          python -m pip list --format=columns
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('vpn_api/requirements.txt','vpn_api/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r vpn_api/requirements.txt
          pip install -r vpn_api/requirements-dev.txt
      - name: Run tests
        run: |
          pytest -q --junitxml=reports/junit.xml --cov=vpn_api --cov-report=xml:reports/coverage.xml --cov-fail-under=80
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports
      - name: Post coverage to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/coverage.xml';
            if (!fs.existsSync(path)) {
              console.log('coverage report not found');
              return;
            }
            const xml = fs.readFileSync(path, 'utf8');
            const m = xml.match(/line-rate="([\\d.]+)"/);
            const pct = m ? (parseFloat(m[1]) * 100).toFixed(1) : 'n/a';
            const body = `**Coverage**: ${pct}%\n\nArtifacts: see workflow run artifacts.`;
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log('no pull_request payload');
              return;
            }
            const issue_number = pr.number;
            const marker = '<!-- coverage-comment -->';
            const full = marker + '\n' + body;
            const { data: comments } = await github.rest.issues.listComments({ owner: context.repo.owner, repo: context.repo.repo, issue_number });
            const existing = comments.find(c => c.body && c.body.startsWith(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: existing.id, body: full });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number, body: full });
            }
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: existing.id, body: full });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number, body: full });
            }
