name: CI

on:
  push:
    branches: [ main, master, feature/**, fix/* ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f vpn_api/requirements.txt ]; then pip install -r vpn_api/requirements.txt; fi
          if [ -f vpn_api/requirements-dev.txt ]; then pip install -r vpn_api/requirements-dev.txt; fi
      - name: Run tests
        env:
          PYTHONASYNCIODEBUG: '1'
        run: |
          mkdir -p reports
          python -m pytest -q --junitxml=reports/junit.xml --cov=vpn_api --cov-report=xml:reports/coverage.xml --cov-fail-under=80
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports
  integration:
    name: Integration tests (Postgres)
    needs: test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vpn
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Wait for Postgres
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in {1..60}; do pg_isready -h localhost -p 5432 -U postgres && exit 0 || sleep 1; done
          echo "Postgres did not become available" && exit 1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r vpn_api/requirements.txt
          pip install -r vpn_api/requirements-dev.txt
      - name: Apply migrations
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/vpn
        run: alembic -c alembic.ini upgrade head
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/vpn
        run: |
          python -m pytest -q vpn_api/test_flow.py::test_basic_flow vpn_api/test_payments.py::test_payments_crud_flow vpn_api/test_peers.py::test_peers_crud_flow vpn_api/test_admin_flow.py::test_admin_flow
