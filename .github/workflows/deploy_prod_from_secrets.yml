name: Deploy to production (from secrets)

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # handle empty SSH_PORT: ssh-keyscan will default to 22 if -p is not provided
          if [ -n "$SSH_PORT" ]; then
            ssh-keyscan -p "$SSH_PORT" -H "$SSH_HOST" >> ~/.ssh/known_hosts || true
          else
            ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts || true
          fi

      - name: Render .env.production locally
        run: |
          printf '%s\n' \
            "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            "UVICORN_WORKERS=2" \
            "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
            "SMTP_HOST=${{ secrets.SMTP_HOST }}" \
            "SMTP_PORT=${{ secrets.SMTP_PORT }}" \
            "SMTP_USER=${{ secrets.SMTP_USER }}" \
            "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" \
            "SMTP_FROM=${{ secrets.SMTP_FROM }}" \
            > .env.production

      - name: Copy .env.production to server
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          # fail fast if essential secrets missing
          if [ -z "$SSH_USER" ] || [ -z "$SSH_HOST" ] || [ -z "$DEPLOY_PATH" ]; then
            echo "Required secret(s) missing: SSH_USER='$SSH_USER', SSH_HOST='$SSH_HOST', DEPLOY_PATH='$DEPLOY_PATH'" >&2
            exit 1
          fi
          # prepare optional port args for scp/ssh
          if [ -n "$SSH_PORT" ]; then
            SCP_PORT_ARG="-P $SSH_PORT"
            SSH_PORT_ARG="-p $SSH_PORT"
          else
            SCP_PORT_ARG=""
            SSH_PORT_ARG=""
          fi
          echo "Copying .env.production to $SSH_USER@$SSH_HOST:$DEPLOY_PATH (using port '${SSH_PORT:-22}')"
          # shellcheck disable=SC2086
          scp $SCP_PORT_ARG .env.production "$SSH_USER"@"$SSH_HOST":"$DEPLOY_PATH/.env.production.tmp"
          # shellcheck disable=SC2086
          ssh $SSH_PORT_ARG "$SSH_USER"@"$SSH_HOST" 'bash -s' <<'REMOTE'
            set -e
            cd "$DEPLOY_PATH"
            if [ -f .env.production ]; then
              cp .env.production .env.production.$(date -u +%Y%m%dT%H%M%SZ).bak || true
            fi
            mv .env.production.tmp .env.production
            chmod 600 .env.production
            echo ".env.production written and secured"
          REMOTE

      - name: Run remote migrations and deploy
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          if [ -z "$SSH_USER" ] || [ -z "$SSH_HOST" ] || [ -z "$DEPLOY_PATH" ]; then
            echo "Required secret(s) missing for deploy: SSH_USER='$SSH_USER', SSH_HOST='$SSH_HOST', DEPLOY_PATH='$DEPLOY_PATH'" >&2
            exit 1
          fi
          if [ -n "$SSH_PORT" ]; then
            SSH_PORT_ARG="-p $SSH_PORT"
          else
            SSH_PORT_ARG=""
          fi
          echo "Running remote deploy on $SSH_USER@$SSH_HOST (port ${SSH_PORT:-22})"
          # shellcheck disable=SC2086
          ssh $SSH_PORT_ARG "$SSH_USER"@"$SSH_HOST" 'bash -s' <<'REMOTE'
            set -euo pipefail
            cd "$DEPLOY_PATH"
            if command -v pg_dump >/dev/null 2>&1; then
              pg_dump "$DATABASE_URL" -f backup_pre_migrate_$(date -u +%Y%m%dT%H%M%SZ).sql || true
            fi
            docker compose pull || true
            docker compose up -d --build
            docker compose exec -T web alembic upgrade head || true
            echo 'Deploy finished'
          REMOTE
