name: Deploy to Production

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

      - name: Ensure remote deploy path exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p '${{ secrets.DEPLOY_PATH }}'"

      - name: Rsync project files to server
        run: |
          rsync -avz --delete --exclude '.git' --exclude 'venv' ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: Render .env.production locally
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
        run: |
          printf "DATABASE_URL=%s\nUVICORN_WORKERS=2\nSECRET_KEY=%s\nSMTP_HOST=%s\nSMTP_PORT=%s\nSMTP_USER=%s\nSMTP_PASSWORD=%s\nSMTP_FROM=%s\n" \
            "$DATABASE_URL" "$SECRET_KEY" "$SMTP_HOST" "$SMTP_PORT" "$SMTP_USER" "$SMTP_PASSWORD" "$SMTP_FROM" > .env.production

      - name: Copy .env.production to server
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          scp -o StrictHostKeyChecking=no .env.production "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}/.env.production.tmp"
          ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} 'bash -s' <<'REMOTE'
            set -e
            cd "$DEPLOY_PATH"
            if [ -f .env.production ]; then
              cp .env.production .env.production.$(date -u +%Y%m%dT%H%M%SZ).bak || true
            fi
            mv .env.production.tmp .env.production
            chmod 600 .env.production
            echo ".env.production written and secured"
          REMOTE

      - name: Run migrations and deploy
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} 'bash -s' <<'REMOTE'
            set -euo pipefail
            cd "$DEPLOY_PATH"
            # Backup DB if pg_dump exists
            if command -v pg_dump >/dev/null 2>&1; then
              echo "Creating database backup before migrations..."
              pg_dump "$DATABASE_URL" -f backup_pre_migrate_$(date -u +%Y%m%dT%H%M%SZ).sql || true
            fi
            # Pull, build, and run Docker
            docker compose pull || true
            docker compose up -d --build
            # Run Alembic migrations inside web container
            docker compose exec -T web alembic upgrade head || true
            echo "Deploy finished"
          REMOTE
