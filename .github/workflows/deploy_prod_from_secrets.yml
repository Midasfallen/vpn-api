name: Deploy to production (from secrets)

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "${{ secrets.PROD_SSH_PORT }}" -H "${{ secrets.PROD_SSH_HOST }}" >> ~/.ssh/known_hosts || true

      - name: Render .env.production locally
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
        run: |
          cat > .env.production <<EOF
          DATABASE_URL=${DATABASE_URL}
          UVICORN_WORKERS=2
          SECRET_KEY=${SECRET_KEY}
          SMTP_HOST=${SMTP_HOST}
          SMTP_PORT=${SMTP_PORT}
          SMTP_USER=${SMTP_USER}
          SMTP_PASSWORD=${SMTP_PASSWORD}
          SMTP_FROM=${SMTP_FROM}
          EOF

      - name: Copy .env.production to server
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          scp -P "$SSH_PORT" .env.production "$SSH_USER"@"$SSH_HOST":"$DEPLOY_PATH/.env.production.tmp"
          ssh -p "$SSH_PORT" "$SSH_USER"@"$SSH_HOST" "bash -s" <<'REMOTE'
set -e
cd "$DEPLOY_PATH"
# backup existing env
if [ -f .env.production ]; then
  cp .env.production .env.production.$(date -u +%Y%m%dT%H%M%SZ).bak || true
fi
# move tmp into place with secure perms
mv .env.production.tmp .env.production
chmod 600 .env.production || true
# optional: run pre-deploy commands
echo ".env.production written and secured"
REMOTE

      - name: Run remote migrations and deploy
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER"@"$SSH_HOST" "bash -s" <<'REMOTE'
set -euo pipefail
cd "$DEPLOY_PATH"
# create DB backup before running migrations (adjust pg_dump command if needed)
if command -v pg_dump >/dev/null 2>&1; then
  echo 'Creating DB dump before migrate...'
  pg_dump "$DATABASE_URL" -f backup_pre_migrate_$(date -u +%Y%m%dT%H%M%SZ).sql || true
fi
# Run migrations inside containerized environment -- adjust as your deployment requires
docker compose pull || true
docker compose up -d --build
# run alembic upgrade inside web container if your image includes alembic
docker compose exec -T web alembic upgrade head || true
echo 'Deploy finished'
REMOTE
