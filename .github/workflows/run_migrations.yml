name: Run migrations

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type YES to confirm running migrations on the remote DB (required)'
        required: true
        default: 'NO'
  push:
    branches: [ main, master ]

jobs:
  migrate:
    name: run alembic migrations
    runs-on: ubuntu-latest
  # For manual dispatch require confirm == YES, for push events run automatically
  # We'll abort early in a step if manual dispatch without confirmation
    steps:
      - uses: actions/checkout@v4

      - name: Sanity check
        run: |
          echo "Sanity: workflow parsed and runner started"

      - name: Abort if manual dispatch not confirmed
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "YES" ]; then
            echo "Manual dispatch not confirmed. Set 'confirm' to YES to proceed."; exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system deps (pg client)
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r vpn_api/requirements.txt
          pip install -r vpn_api/requirements-dev.txt
          pip install alembic

      - name: Backup remote Postgres (if using postgres)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Attempting backup using pg_dump -- will skip if DATABASE_URL is not postgres"
          case "$DATABASE_URL" in
            postgresql://*|postgresql+psycopg2://*|postgres://*)
              echo "Detected Postgres URI, preparing connection info..."
              # Normalize SQLAlchemy-style scheme (remove +psycopg2 if present)
              DBURL_NORMALIZED=$(echo "$DATABASE_URL" | sed -E 's/\+psycopg2//')
              export DBURL="$DBURL_NORMALIZED"

              # Parse DB URL into libpq connection pieces using Python (safe: do not print password)
              python - <<'PY' > dbinfo.env
import os, urllib.parse
u = os.environ.get('DBURL', '')
if not u:
    raise SystemExit(1)
p = urllib.parse.urlparse(u)
print(f'PGHOST={p.hostname or ""}')
print(f'PGPORT={p.port or ""}')
print(f'PGUSER={p.username or ""}')
print(f'PGPASSWORD={p.password or ""}')
print(f'PGDATABASE={(p.path[1:] if p.path else "")}')
PY

              # Load parsed env (source the file with exported vars)
              set -a
              . ./dbinfo.env
              set +a

              # Basic diagnostics (do not print password)
              echo "Parsed DB host=$PGHOST port=${PGPORT:-5432} user=$PGUSER database=$PGDATABASE"

              if [ -z "$PGHOST" ]; then
                echo "Could not parse a host from DATABASE_URL, aborting backup"; exit 1
              fi

              # Run pg_dump over TCP using parsed fields (export password only for pg_dump)
              export PGPASSWORD="$PGPASSWORD"
              pg_dump --host="$PGHOST" --port="${PGPORT:-5432}" --username="$PGUSER" --dbname="$PGDATABASE" -F c -f backup.dump || (echo "pg_dump failed"; exit 1)
              # unset sensitive env var
              unset PGPASSWORD
              ;;
            *)
              echo "DATABASE_URL is not Postgres, skipping pg_dump"
              ;;
          esac

      - name: Upload DB backup
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: db-backup
          path: backup.dump

      - name: Run alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Running alembic upgrade head"
          alembic -c alembic.ini upgrade head

      - name: Show current alembic revision
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          alembic -c alembic.ini current
